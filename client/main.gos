package main

import (
	"fmt"
	"net"
	"strconv"
	"time"
)

type Message struct {
	ClientSendTime			int
	ServerReceiveTime		int
	Content					string
	Type					string
}

var ReceiveChan = make(chan *Message, 100)
var SendChan = make(chan *Message, 100)

func main() {
	tcpAddr, err := net.ResolveTCPAddr("tcp4", "localhost:7077") //TCP连接地址
	if err != nil {
		fmt.Println(err)
		return
	}
	tcpCoon, err := net.DialTCP("tcp4", nil, tcpAddr) //建立连接
	if err != nil {
		fmt.Println(err)
		return
	}
	defer tcpCoon.Close() //关闭

	go func() {
		for v := range SendChan {
			n, err := tcpCoon.Write([]byte(v.Content)) //发送数据
			if err != nil {
				fmt.Println(err)
				return
			}
			fmt.Printf("Send %d byte data success: %s \n", n, v.Content)
		}
	}()

	go func() {
		for true {
			recvData := make([]byte, 2048)
			n, err := tcpCoon.Read(recvData) //读取数据
			if err != nil {
				fmt.Println(err)
				return
			}
			recvStr := string(recvData[:n])
			fmt.Printf("Response data: %s \n", recvStr)
		}
	}()

	for i:=0; i<100; i++ {
		SendChan <- &Message{
			ClientSendTime:    0,
			ServerReceiveTime: 0,
			Content:           "test"+strconv.Itoa(i),
			Type:              "",
		}
		<- time.Tick(time.Second * 1)
	}
}